# This is an example AsyncHBase client configuration file.
# To use it, instantiate a config object with the path and then
# instantiate an HBaseClient with the config.
# final org.hbase.async.Config config = 
#   new org.hbase.async.Config("path");
# final org.hbase.async.HBaseClient client = 
#   new org.hbase.async.HBaseClient(config);
#
# You can also copy and paste these properties in another config
# file that is shared with your application.
# All parameters have defaults except for the 
# hbase.zookeeper.quorum parameter that must have a list of 
# zookeeper hosts to connect to.

# A comma separated list of zookeeper servers. Ports are optional.
# E.g. zk1.mysite.com:2181,zk2.mysite.com:2181,zk3.mysite.com:2181
hbase.zookeeper.quorum=localhost

# The root node for HBase in Zookeeper
#hbase.zookeeper.znode.parent=/hbase

# How often the timer should wake up to check for tasks to run 
# such as kerberos ticket renewals or flushing buffered increments.
# The value is in milliseconds
#hbase.timer.tick=20

# How often to retry an individual RPC against HBase. After this
# many tries the RPC will return an exception.
#hbase.rpcs.max_retry_attempts=10

# How often, in milliseconds, to flush buffered RPCs (such as puts
# or appends) to the region servers.
#hbase.rpcs.buffered_flush_interval=1000

# The maximum number of RPCs to queue per region when said region
# is marked as offline due to a split or migration. Writes to any
# region with a full NSRE queue will return a PleaseThrottleException.
#hbase.nsre.high_watermark=10000

# How many individual atomic increment counters should be buffered
# in memory. When this limit is reached, new counters are flushed
# immediately and may result in higher RPC counts.
#hbase.increments.buffer_size=65535

# -------------- SECURITY ------------------
# A flag to determine if security should be used or not.
#hbase.security.auth.enable=false

# A flag that must be set when using HBase version 0.94 for security
# to function properly.
#hbase.security.auth.94=false

# The mechanism to use for authentication. AsyncHBase supports 
# keberose or simple. When using keberos, you should create a 
# keytab file for your user and you must set the JAAS config file
# by passing -Djava.security.login.auth.config=<path> to your JVM.
#hbase.security.authentication=kerberos

# Whether or not RPCs should be encrypted in flight. Possible values
# include:
# authentication - no encryption
# integrity - encrypted
# privacy - encrypted
#hbase.rpc.protection=authentication

# When using simple authentication, supply the username here.
#hbase.security.simple.username=

# The principal to use when authenticating with Kerberos against
# a region server. You can specify an explicit host name or use
# the _HOST token that will be replaced by the hostname.
#hbase.kerberos.regionserver.principal=hbase/_HOST@EXAMPLE.COM

# NOTE: Use keytabs instead!
# A password to use for keberos authentication
#hbase.regionserver.kerberos.password=

# The context name to use in the jaas.conf file you supplied to
# java.security.login.auth.config when starting the JVM
#hbase.sasl.clientconfig=Client

io.netty.noPreferDirect=true